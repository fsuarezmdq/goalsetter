// <auto-generated />
using System;
using Goalsetter.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Goalsetter.DataAccess.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20201203002013_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Goalsetter.Domains.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientID");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6238554c-2d3c-4e25-a2dc-9ed13dfb570e"),
                            ClientName = "José de San Martin",
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 711, DateTimeKind.Utc).AddTicks(5489),
                            Email = "jose@sanmartin.com",
                            IsActive = true,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 711, DateTimeKind.Utc).AddTicks(5498)
                        },
                        new
                        {
                            Id = new Guid("88393b8d-aa92-4914-95d4-6523f9006252"),
                            ClientName = "Mariano Moreno",
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3979),
                            Email = "marian@moreno.com",
                            IsActive = true,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3980)
                        },
                        new
                        {
                            Id = new Guid("060647f4-0f55-43e3-8bcd-b4311bbcc962"),
                            ClientName = "Juan José Castelli",
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(4007),
                            Email = "jose@castelli.com",
                            IsActive = true,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(4008)
                        },
                        new
                        {
                            Id = new Guid("5e96745c-2a42-4e5b-ae74-ea834d673f48"),
                            ClientName = "Domingo Faustino Sarmiento",
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(4025),
                            Email = "domi@sarmiento.com",
                            IsActive = true,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(4026)
                        });
                });

            modelBuilder.Entity("Goalsetter.Domains.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("698258e4-8246-4a3d-8e0c-a974e532ccf5"),
                            ClientId = new Guid("6238554c-2d3c-4e25-a2dc-9ed13dfb570e"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 715, DateTimeKind.Utc).AddTicks(2990),
                            IsActive = true,
                            TotalPrice = 2100m,
                            VehicleId = new Guid("bcddd166-c7df-49b0-986c-b63880a234d8")
                        });
                });

            modelBuilder.Entity("Goalsetter.Domains.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Makes")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcddd166-c7df-49b0-986c-b63880a234d8"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 701, DateTimeKind.Utc).AddTicks(3991),
                            IsActive = true,
                            Makes = "Chevrolet",
                            Model = "Cruze",
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 701, DateTimeKind.Utc).AddTicks(3995),
                            Year = 2017
                        },
                        new
                        {
                            Id = new Guid("37b3fe05-d5a1-4c57-9946-589ff756e0d3"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 712, DateTimeKind.Utc).AddTicks(2809),
                            IsActive = true,
                            Makes = "Chevrolet",
                            Model = "Corsa",
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 712, DateTimeKind.Utc).AddTicks(2831),
                            Year = 2011
                        },
                        new
                        {
                            Id = new Guid("0934e16d-6c45-4286-8568-472a017bd7f9"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 712, DateTimeKind.Utc).AddTicks(2834),
                            IsActive = true,
                            Makes = "Ford",
                            Model = "F-100",
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 712, DateTimeKind.Utc).AddTicks(2837),
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("23345e2f-0f9a-4f10-bd57-c769d53b184f"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 712, DateTimeKind.Utc).AddTicks(2839),
                            IsActive = true,
                            Makes = "Fiat",
                            Model = "Palio",
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 712, DateTimeKind.Utc).AddTicks(2843),
                            Year = 2008
                        });
                });

            modelBuilder.Entity("Goalsetter.Domains.VehiclePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VehiclePriceID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.ToTable("VehiclePrice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcddd166-c7df-49b0-986c-b63880a234d8"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3131),
                            IsActive = true,
                            Price = 150m,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3134)
                        },
                        new
                        {
                            Id = new Guid("37b3fe05-d5a1-4c57-9946-589ff756e0d3"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3141),
                            IsActive = true,
                            Price = 100m,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3142)
                        },
                        new
                        {
                            Id = new Guid("0934e16d-6c45-4286-8568-472a017bd7f9"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3146),
                            IsActive = true,
                            Price = 120m,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3146)
                        },
                        new
                        {
                            Id = new Guid("23345e2f-0f9a-4f10-bd57-c769d53b184f"),
                            CreatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3150),
                            IsActive = true,
                            Price = 80m,
                            UpdatedDate = new DateTime(2020, 12, 3, 0, 20, 12, 713, DateTimeKind.Utc).AddTicks(3150)
                        });
                });

            modelBuilder.Entity("Goalsetter.Domains.Rental", b =>
                {
                    b.HasOne("Goalsetter.Domains.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("ClientId");

                    b.HasOne("Goalsetter.Domains.Vehicle", "Vehicle")
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId");

                    b.OwnsOne("Goalsetter.Domains.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.HasKey("RentalId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId");
                        });

                    b.Navigation("Client");

                    b.Navigation("DateRange");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Goalsetter.Domains.VehiclePrice", b =>
                {
                    b.HasOne("Goalsetter.Domains.Vehicle", "Vehicle")
                        .WithOne("RentalPrice")
                        .HasForeignKey("Goalsetter.Domains.VehiclePrice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Goalsetter.Domains.Client", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Goalsetter.Domains.Vehicle", b =>
                {
                    b.Navigation("RentalPrice");

                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
